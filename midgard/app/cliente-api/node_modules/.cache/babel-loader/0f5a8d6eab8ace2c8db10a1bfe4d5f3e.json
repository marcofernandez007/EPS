{"ast":null,"code":"import _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\midgard\\\\app\\\\cliente-api\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\midgard\\\\app\\\\cliente-api\\\\src\\\\components\\\\clientes\\\\Clientes.js\";\nimport React, { useEffect, useState, useContext, Fragment } from 'react'; // importar cliente axios\n\nimport clienteAxios from '../../config/axios';\nimport Cliente from './CLiente';\nimport Spinner from '../layout/Spinner';\nimport { Link, withRouter } from 'react-router-dom'; // import el Context\n\nimport { CRMContext } from '../../context/CRMContext';\n\nfunction Clientes(props) {\n  // Trabajar con el state\n  // clientes = state,  guardarClientes = funcion para guardar el state\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        clientes = _useState2[0],\n        guardarClientes = _useState2[1]; // utilizar valores del context\n\n\n  const _useContext = useContext(CRMContext),\n        _useContext2 = _slicedToArray(_useContext, 2),\n        auth = _useContext2[0],\n        guardarAuth = _useContext2[1]; // use effect es similar a componentdidmount y willmount\n\n\n  useEffect(() => {\n    if (auth.token !== '') {\n      // Query a la API\n      const consultarAPI = async () => {\n        try {\n          const clientesConsulta = await clienteAxios.get('/clientes', {\n            headers: {\n              Authorization: \"Bearer \".concat(auth.token)\n            }\n          }); // colocar el resultado en el state\n\n          guardarClientes(clientesConsulta.data);\n        } catch (error) {\n          // Error con authorizacion\n          if (error.response.status = 500) {\n            props.history.push('/iniciar-sesion');\n          }\n        }\n      };\n\n      consultarAPI();\n    } else {\n      props.history.push('/iniciar-sesion');\n    }\n  }, [clientes]); // Si el state esta como false\n\n  if (!auth.auth) {\n    props.history.push('/iniciar-sesion');\n  }\n\n  if (!clientes.length) return React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Clientes\"), React.createElement(Link, {\n    to: \"/clientes/nuevo\",\n    className: \"btn btn-verde nvo-cliente\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-plus-circle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), \"Nuevo Cliente\"), React.createElement(\"ul\", {\n    className: \"listado-clientes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, clientes.map(cliente => React.createElement(Cliente, {\n    key: cliente._id,\n    cliente: cliente,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }))));\n}\n\nexport default withRouter(Clientes);","map":{"version":3,"sources":["C:\\xampp\\htdocs\\midgard\\app\\cliente-api\\src\\components\\clientes\\Clientes.js"],"names":["React","useEffect","useState","useContext","Fragment","clienteAxios","Cliente","Spinner","Link","withRouter","CRMContext","Clientes","props","clientes","guardarClientes","auth","guardarAuth","token","consultarAPI","clientesConsulta","get","headers","Authorization","data","error","response","status","history","push","length","map","cliente","_id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,QAAjD,QAAiE,OAAjE,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC,C,CAEA;;AACA,SAASC,UAAT,QAA2B,0BAA3B;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACrB;AACA;AAFqB,oBAGiBV,QAAQ,CAAC,EAAD,CAHzB;AAAA;AAAA,QAGbW,QAHa;AAAA,QAGHC,eAHG,kBAKrB;;;AALqB,sBAMQX,UAAU,CAAEO,UAAF,CANlB;AAAA;AAAA,QAMdK,IANc;AAAA,QAMRC,WANQ,oBAQrB;;;AACAf,EAAAA,SAAS,CAAE,MAAM;AAEb,QAAGc,IAAI,CAACE,KAAL,KAAe,EAAlB,EAAsB;AAClB;AACA,YAAMC,YAAY,GAAG,YAAY;AAC7B,YAAI;AACA,gBAAMC,gBAAgB,GAAG,MAAMd,YAAY,CAACe,GAAb,CAAiB,WAAjB,EAA8B;AACzDC,YAAAA,OAAO,EAAE;AACLC,cAAAA,aAAa,mBAAaP,IAAI,CAACE,KAAlB;AADR;AADgD,WAA9B,CAA/B,CADA,CAOA;;AACAH,UAAAA,eAAe,CAACK,gBAAgB,CAACI,IAAlB,CAAf;AAEH,SAVD,CAUE,OAAOC,KAAP,EAAc;AACZ;AACA,cAAGA,KAAK,CAACC,QAAN,CAAeC,MAAf,GAAwB,GAA3B,EAAgC;AAC5Bd,YAAAA,KAAK,CAACe,OAAN,CAAcC,IAAd,CAAmB,iBAAnB;AACH;AACJ;AACJ,OAjBD;;AAkBAV,MAAAA,YAAY;AACf,KArBD,MAqBO;AACHN,MAAAA,KAAK,CAACe,OAAN,CAAcC,IAAd,CAAmB,iBAAnB;AACH;AACJ,GA1BQ,EA0BN,CAACf,QAAD,CA1BM,CAAT,CATqB,CAsCrB;;AACA,MAAG,CAACE,IAAI,CAACA,IAAT,EAAe;AACXH,IAAAA,KAAK,CAACe,OAAN,CAAcC,IAAd,CAAmB,iBAAnB;AACH;;AAED,MAAG,CAACf,QAAQ,CAACgB,MAAb,EAAqB,OAAO,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAGrB,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAII,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,iBAAV;AAA6B,IAAA,SAAS,EAAC,2BAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,kBAJJ,EASI;AAAI,IAAA,SAAS,EAAC,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKhB,QAAQ,CAACiB,GAAT,CAAaC,OAAO,IACjB,oBAAC,OAAD;AACI,IAAA,GAAG,EAAEA,OAAO,CAACC,GADjB;AAEI,IAAA,OAAO,EAAED,OAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADL,CATJ,CADJ;AAqBH;;AACD,eAAetB,UAAU,CAACE,QAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, Fragment } from 'react';\r\n\r\n// importar cliente axios\r\nimport clienteAxios from '../../config/axios';\r\nimport Cliente from './CLiente';\r\nimport Spinner from '../layout/Spinner';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\n// import el Context\r\nimport { CRMContext } from '../../context/CRMContext';\r\n\r\nfunction Clientes(props) {\r\n    // Trabajar con el state\r\n    // clientes = state,  guardarClientes = funcion para guardar el state\r\n    const [ clientes, guardarClientes ] = useState([]);\r\n\r\n    // utilizar valores del context\r\n    const [auth, guardarAuth ] = useContext( CRMContext );\r\n\r\n    // use effect es similar a componentdidmount y willmount\r\n    useEffect( () => {\r\n\r\n        if(auth.token !== '') {\r\n            // Query a la API\r\n            const consultarAPI = async () => {\r\n                try {\r\n                    const clientesConsulta = await clienteAxios.get('/clientes', {\r\n                        headers: {\r\n                            Authorization : `Bearer ${auth.token}`\r\n                        }\r\n                    });\r\n    \r\n                    // colocar el resultado en el state\r\n                    guardarClientes(clientesConsulta.data);\r\n\r\n                } catch (error) {\r\n                    // Error con authorizacion\r\n                    if(error.response.status = 500) {\r\n                        props.history.push('/iniciar-sesion');\r\n                    }\r\n                }\r\n            }\r\n            consultarAPI();\r\n        } else {\r\n            props.history.push('/iniciar-sesion');\r\n        }\r\n    }, [clientes] );\r\n\r\n\r\n    // Si el state esta como false\r\n    if(!auth.auth) {\r\n        props.history.push('/iniciar-sesion');\r\n    }\r\n\r\n    if(!clientes.length) return <Spinner /> \r\n\r\n    \r\n    return (\r\n        <Fragment>\r\n        \r\n            <h2>Clientes</h2>\r\n\r\n            <Link to={\"/clientes/nuevo\"} className=\"btn btn-verde nvo-cliente\"> \r\n                <i className=\"fas fa-plus-circle\"></i>\r\n                Nuevo Cliente\r\n            </Link>\r\n\r\n            <ul className=\"listado-clientes\">\r\n                {clientes.map(cliente => (\r\n                    <Cliente \r\n                        key={cliente._id}\r\n                        cliente={cliente}\r\n                    />\r\n                ))}\r\n            </ul>\r\n\r\n        </Fragment>\r\n    )\r\n}\r\nexport default withRouter(Clientes);"]},"metadata":{},"sourceType":"module"}